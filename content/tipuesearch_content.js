var tipuesearch = {"pages": [{'title': 'First', 'text': '收尋所使用的 git 版本 \n', 'tags': '', 'url': 'First.html'}, {'title': 'SSH設定', 'text': '利用 y:\\portablegit\\bin\\sh.exe 進入 shell 命令環境後, 以 \n  ssh-keygen -t rsa -b 4096 -C "使用者學號" \n \n 在 /y/home/.ssh 目錄下建立 id_rsa 與 id_rsa.pub 等 private key 與 public key \n 之後以 SciTE 開啟 id_rsa.pub 後, 將此 public key 的內容, 以新增添加到 Github.com 帳號下 personal settings -> SSH and GPG keys 頁面下 \n \n \n 接下來要利用 puttygen.exe 將 id_rsa 轉為 Putty 可以解讀的 .ppk 格式, 並修改隨身系統的啟動批次檔案, 指定利用 putty 目錄下的 plink 執行 git 指令的網路代理設定. \n \n \n 修改啟動 start.bat 加入設定 :\xa0 \n set GIT_HOME=%Disk%:\\portablegit\\bin\\\nset GIT_SSH=%Disk%:\\putty\\plink.exe \n . \n 利用 puttygen.exe 載入第二步驟所建立的 private key, 也就是 id_rsa. \n 開啟 puttygen 之後, 以右下方的 load 載入 id_rsa, 成功載入後, 利用 save private key 按鈕, 將已經轉為 putty 格式的 .ppk 存檔. 此一 .ppk 檔案必須在設定 putty 中 github.com session 時, 在 Connection->SSH->Auth 項目下, 將轉檔後的 .ppk 指向 private key file for authentication 欄位.\xa0 \n \n \n 之後確定 home 下的 .ssh 目錄中的 config 設定檔案為 :\xa0 \n # no proxy at home\n#ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.mde.nfu.edu.tw:3128 %h %p\n# set git_ssh=y:/putty/plink.exe with auth under putty github.com session setup\nProxyCommand y:/putty/plink.exe github.com %h %p\n \nHost github.com\n    User git\n    Port 22\n    Hostname github.com\n    \n    # for connect.exe need openssh key format\n    #IdentityFile "y:\\home\\.ssh\\id_rsa_mdecourse"\n    # for plink.exe need rsa key format but set under putty github.com session\n    # plink.exe do not need the following setting\n    #IdentityFile "y:\\home\\.ssh\\mdecourse_putty_private.ppk"\n \n    TCPKeepAlive yes\n    IdentitiesOnly yes\n \n ( 使用proxy才須使用接下來的設定 ) \n 最後再將 wcmj2020 倉儲中 .git 目錄下的 config 檔案中的連線協定, 由 https 改為採 ssh 連線: 範例如下: \n [core]\n\trepositoryformatversion = 0\n\tfilemode = false\n\tbare = false\n\tlogallrefupdates = true\n\tsymlinks = false\n\tignorecase = true\n[submodule]\n\tactive = .\n[remote "origin"]\n\t#url = https://github.com/mdecourse/wcmj2020.git\n    url = git@github.com:mdecourse/wcmj2020.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch "master"]\n\tremote = origin\n\tmerge = refs/heads/master\n[submodule "cmsimde"]\n\turl = https://github.com/mdecourse/cmsimde.git', 'tags': '', 'url': 'SSH設定.html'}, {'title': 'PyPdf2', 'text': '可以用來切割，結合PDF檔 \n (1)切割一段 \n # pypdf2_ex1.py\nimport os\nfrom PyPDF2 import PdfFileWriter, PdfFileReader\n\npdfReader = PdfFileReader(open("2002_Book_Real-WorldASPNETBuildingAConte.pdf", "rb"))\ninformation = [("WhatIsCMS",18,45)]\n\nfor page in range(len(information)):\n    pdf_writer = PdfFileWriter()\n    start = information[page][1]\n    end = information[page][2]\n    while start<=end:\n        pdf_writer.addPage(pdfReader.getPage(start-1))\n        start+=1\n    if not os.path.exists("./"):\n        os.makedirs(savepath)\n    output_filename = \'{}_{}_page_{}.pdf\'.format(information[page][0],information[page][1], information[page][2])\n    with open(output_filename,\'wb\') as out:\n        pdf_writer.write(out)\n \n (2)切割二段 \n # pypdf2_ex2.py\nimport os\nfrom PyPDF2 import PdfFileWriter, PdfFileReader\n\npdfReader = PdfFileReader(open("Beginning-Git-and-GitHub.pdf", "rb"))\ninformation = [("GitAndGithub",17,105),("GitAndGithub",107,194),("GitAndGithub",196,289)]\n\nfor page in range(len(information)):\n    pdf_writer = PdfFileWriter()\n    start = information[page][1]\n    end = information[page][2]\n    while start<=end:\n        pdf_writer.addPage(pdfReader.getPage(start-1))\n        start+=1\n    if not os.path.exists("./"):\n        os.makedirs(savepath)\n    output_filename = \'{}_{}_page_{}.pdf\'.format(information[page][0],information[page][1], information[page][2])\n    with open(output_filename,\'wb\') as out:\n        pdf_writer.write(out)\n \n (3)合併 \n # pypdf2_ex3.py\n# merge several pdf files\nimport sys\nimport PyPDF2\n\npdf_write_object = PyPDF2.PdfFileWriter()\n\n#for i in sys.argv[1:]:\nfor i in ["WhatIsCMS.pdf","InforLifeCycle.pdf","EnterpriseContentManage.pdf"]:\n    pdf_read_object = PyPDF2.PdfFileReader(i)\n    print(\'processing file : \'+ i + \'number of pages : \' +  str(pdf_read_object.numPages))\n    for page in range(pdf_read_object.numPages):\n        pdf_write_object.addPage(pdf_read_object.getPage(page))\n\nfinal_file_object = open(\'2020CMS.pdf\', \'wb\')\npdf_write_object.write(final_file_object)\nfinal_file_object.close()\n', 'tags': '', 'url': 'PyPdf2.html'}, {'title': '錯誤處理', 'text': '', 'tags': '', 'url': '錯誤處理.html'}, {'title': '啟動 leo 出現錯誤', 'text': '原因 :\xa0 \n >pythonw -u "launchLeo.py" Traceback (most recent call last):  File "launchLeo.py", line 7, in <module>  import leo.core.runLeo ModuleNotFoundError: No module named \'leo\' >Exit code: 1 \n => ModuleNotFoundError: No module named \'leo\' 沒有LEO模組 \n 解決方法 : 用 pip install leo 指令安裝 leo \n', 'tags': '', 'url': '啟動 leo 出現錯誤.html'}, {'title': 'pip install 無法使用', 'text': '原因 : 版本不一 \n 解決方法 : 用 HxD 將 pip.exe中的 pythonw.exe取代為 python.exe \n', 'tags': '', 'url': 'pip install 無法使用.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.', 'tags': '', 'url': 'Develop.html'}]};