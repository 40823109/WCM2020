<h1>First</h1>
<p>網站 : <a href="https://40823109.github.io/WCM2020">https://40823109.github.io/WCM2020</a></p>
<p>倉儲 : <a href="https://github.com/40823109/WCM2020">https://github.com/40823109/WCM2020</a></p>
<p>搜尋所使用的 git 版本</p>
<p>指令 : git --version</p>
<p><img alt="" height="50" src="/images/1592618635507.jpg" width="296"/></p><h1>建立網站程序</h1>
<p>(1) 在 github 中，建立一個新的倉儲</p>
<p><img alt="" height="311" src="/images/1592897778423.jpg" width="390"/></p>
<p>(2) 在隨身系統中建立一個新的資料夾 tmp2</p>
<p><img alt="" height="235" src="/images/1592897969088.jpg" width="424"/></p>
<p>(3) 使用指令 git clone 下剛建立的倉儲</p>
<p><img alt="" height="90" src="/images/1592898033193.jpg" width="369"/></p>
<p>(4) 使用 <span>git submodule add 裝入cmsimde 模組</span></p>
<p><span><img alt="" height="14" src="/images/1592898352963.jpg" width="408"/></span></p>
<p><span>(5) 進入 up_dir 將裡面的檔案複製到外面</span></p>
<p><span><img caption="false" height="218" src="/images/1592898498228.jpg" width="309"/></span></p>
<p><span><img alt="" height="231" src="/images/1592899264252.jpg" width="265"/></span></p>
<p><span>(6) 進入cmsimde目錄下,將wsgi.py檔拉入SciTE中 執行</span></p>
<p><span><img alt="" height="196" src="/images/1592898526936.jpg" width="285"/></span></p>
<p><span>(7) 進入 https://127.0.0.1:9443/ 即完成建立網站</span></p>
<p><span><img alt="" height="239" src="/images/1592898605643.jpg" width="386"/></span></p><h1>SSH設定</h1>
<p><span>利用 y:\portablegit\bin\sh.exe 進入 shell 命令環境後, 以</span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"> ssh-keygen -t rsa -b 4096 -C "使用者學號"</pre>
<p><img alt="" height="59" src="/images/1592577473981.jpg" width="279"/></p>
<p>在 /y/home/.ssh 目錄下建立 id_rsa 與 id_rsa.pub 等 private key 與 public key</p>
<p>之後以 SciTE 開啟 id_rsa.pub 後, 將此 public key 的內容, 以新增添加到 Github.com 帳號下 personal settings -&gt; SSH and GPG keys 頁面下</p>
<p><img alt="" height="31" src="/images/1592577647763.jpg" width="400"/></p>
<p><img caption="false" height="203" src="/images/1592577769726.jpg" width="339"/></p>
<p><span>接下來要利用 puttygen.exe 將 id_rsa 轉為 Putty 可以解讀的 .ppk 格式, 並修改隨身系統的啟動批次檔案, 指定利用 putty 目錄下的 plink 執行 git 指令的網路代理設定.</span></p>
<p><span><img alt="" height="265" src="/images/1592578252833.jpg" width="291"/></span></p>
<p><span><img alt="" height="14" src="/images/1592578272268.jpg" width="445"/></span></p>
<p><span>修改啟動 start.bat 加入設定 : </span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">set GIT_HOME=%Disk%:\portablegit\bin\
set GIT_SSH=%Disk%:\putty\plink.exe</pre>
<p><img alt="" height="44" src="/images/1592578888002.jpg" width="337"/>.</p>
<p>利用 puttygen.exe 載入第二步驟所建立的 private key, 也就是 id_rsa.</p>
<p>開啟 puttygen 之後, 以右下方的 load 載入 id_rsa, 成功載入後, 利用 save private key 按鈕, 將已經轉為 putty 格式的 .ppk 存檔. 此一 .ppk 檔案必須在設定 putty 中 github.com session 時, 在 Connection-&gt;SSH-&gt;Auth 項目下, 將轉檔後的 .ppk 指向 private key file for authentication 欄位. </p>
<p><img alt="" height="239" src="/images/1592579351882.jpg" width="264"/></p>
<p><img alt="" height="237" src="/images/1592579384378.jpg" width="263"/></p>
<p><span>之後確定 home 下的 .ssh 目錄中的 config 設定檔案為 : </span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># no proxy at home
#ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.mde.nfu.edu.tw:3128 %h %p
# set git_ssh=y:/putty/plink.exe with auth under putty github.com session setup
ProxyCommand y:/putty/plink.exe github.com %h %p
 
Host github.com
    User git
    Port 22
    Hostname github.com
    
    # for connect.exe need openssh key format
    #IdentityFile "y:\home\.ssh\id_rsa_mdecourse"
    # for plink.exe need rsa key format but set under putty github.com session
    # plink.exe do not need the following setting
    #IdentityFile "y:\home\.ssh\mdecourse_putty_private.ppk"
 
    TCPKeepAlive yes
    IdentitiesOnly yes
</pre>
<p><span>( 使用proxy才須使用接下來的設定 )</span></p>
<p><span>最後再將 wcmj2020 倉儲中 .git 目錄下的 config 檔案中的連線協定, 由 https 改為採 ssh 連線: 範例如下:</span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[submodule]
	active = .
[remote "origin"]
	#url = https://github.com/mdecourse/wcmj2020.git
    url = git@github.com:mdecourse/wcmj2020.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master
[submodule "cmsimde"]
	url = https://github.com/mdecourse/cmsimde.git</pre><h1>PyPdf2</h1>
<p>可以用來切割，結合PDF檔</p>
<p>(1)切割一段</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_ex1.py
import os
from PyPDF2 import PdfFileWriter, PdfFileReader

pdfReader = PdfFileReader(open("2002_Book_Real-WorldASPNETBuildingAConte.pdf", "rb"))
information = [("WhatIsCMS",18,45)]

for page in range(len(information)):
    pdf_writer = PdfFileWriter()
    start = information[page][1]
    end = information[page][2]
    while start&lt;=end:
        pdf_writer.addPage(pdfReader.getPage(start-1))
        start+=1
    if not os.path.exists("./"):
        os.makedirs(savepath)
    output_filename = '{}_{}_page_{}.pdf'.format(information[page][0],information[page][1], information[page][2])
    with open(output_filename,'wb') as out:
        pdf_writer.write(out)
</pre>
<p>(2)切割二段</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_ex2.py
import os
from PyPDF2 import PdfFileWriter, PdfFileReader

pdfReader = PdfFileReader(open("Beginning-Git-and-GitHub.pdf", "rb"))
information = [("GitAndGithub",17,105),("GitAndGithub",107,194),("GitAndGithub",196,289)]

for page in range(len(information)):
    pdf_writer = PdfFileWriter()
    start = information[page][1]
    end = information[page][2]
    while start&lt;=end:
        pdf_writer.addPage(pdfReader.getPage(start-1))
        start+=1
    if not os.path.exists("./"):
        os.makedirs(savepath)
    output_filename = '{}_{}_page_{}.pdf'.format(information[page][0],information[page][1], information[page][2])
    with open(output_filename,'wb') as out:
        pdf_writer.write(out)
</pre>
<p>(3)合併</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_ex3.py
# merge several pdf files
import sys
import PyPDF2

pdf_write_object = PyPDF2.PdfFileWriter()

#for i in sys.argv[1:]:
for i in ["WhatIsCMS.pdf","InforLifeCycle.pdf","EnterpriseContentManage.pdf"]:
    pdf_read_object = PyPDF2.PdfFileReader(i)
    print('processing file : '+ i + 'number of pages : ' +  str(pdf_read_object.numPages))
    for page in range(pdf_read_object.numPages):
        pdf_write_object.addPage(pdf_read_object.getPage(page))

final_file_object = open('2020CMS.pdf', 'wb')
pdf_write_object.write(final_file_object)
final_file_object.close()
</pre><h1>錯誤處理</h1>
<h2>啟動 leo 出現錯誤</h2>
<p>原因 : </p>
<p>&gt;pythonw -u "launchLeo.py"<br/>Traceback (most recent call last):<br/> File "launchLeo.py", line 7, in &lt;module&gt;<br/> import leo.core.runLeo<br/>ModuleNotFoundError: No module named 'leo'<br/>&gt;Exit code: 1</p>
<p><span>=&gt; ModuleNotFoundError: No module named 'leo' 沒有LEO模組</span></p>
<p><span>解決方法 : 用 pip install leo 指令安裝 leo</span></p>
<p><span><img alt="" height="24" src="/images/1592533128244.jpg" width="314"/></span></p><h2>pip install 無法使用</h2>
<p>原因 : 版本不一</p>
<p>解決方法 : 用 HxD 將 pip.exe中的 pythonw.exe取代為 python.exe</p>
<p><img alt="" height="279" src="/images/1592530930939.jpg" width="539"/></p><h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>